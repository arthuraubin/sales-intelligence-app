import streamlit as st
import pandas as pd
import io
from Modules.MarketDataLive import get_market_snapshot, style_market_table

# Bouton retour √† l'accueil
if st.button("üè† Retour √† l‚Äôaccueil"):
    st.switch_page("APP.py")

# Titre principal
st.title(" Vue synth√©tique des march√©s")

# Explication en haut de page
st.markdown(
    """
    Cette page affiche un tableau **live** des conditions de march√© : niveaux actuels, variations sur 1j / 5j / 1m, volatilit√© r√©alis√©e et signaux de march√©.
    Les donn√©es sont r√©cup√©r√©es automatiquement via [Yahoo Finance](https://finance.yahoo.com) gr√¢ce √† `yfinance`.
    """
)

# Bouton d‚Äôactualisation des donn√©es
if st.button(" Actualiser les donn√©es"):
    st.session_state['market_data'] = get_market_snapshot()

# Si premi√®re ouverture, charger les donn√©es
if "market_data" not in st.session_state:
    st.session_state['market_data'] = get_market_snapshot()

# Donn√©es originales
df_all = st.session_state['market_data'].copy()

# Liste des classes disponibles pour le filtre
all_classes = [
    "√âQUITY",
    "OBLIGATIONS SOUVERAINES",
    "OBLIGATIONS ‚Äî PERFORMANCE",
    "CR√âDIT IG / HY",
    "TAUX DE R√âF√âRENCE",
    "COMMODITIES",
    "FOREX"
]

# Filtre dynamique par classe d‚Äôactif
col_select, col_button = st.columns([3, 1])
with col_select:
    selected_class = st.selectbox(" Filtrer par classe d‚Äôactif :", ["Toutes"] + all_classes)
with col_button:
    if st.button("‚Ü© R√©initialiser"):
        selected_class = "Toutes"

# Application du filtre
df = df_all.copy()
if selected_class != "Toutes":
    sep_label = f"--- {selected_class.upper()} ---"
    start_idx = df[df["Actif"] == sep_label].index
    if not start_idx.empty:
        i = start_idx[0]
        df = df.iloc[i:]
        # Cherche la prochaine ligne de s√©paration
        next_sep = df[df["Actif"].str.startswith("---") & (df["Actif"] != sep_label)].index
        if not next_sep.empty:
            df = df.iloc[: next_sep[0] - i]

# Sous-titre
st.subheader(" Donn√©es march√© live")
st.markdown("---")

# D√©tection des erreurs
df_erreurs = df[df["Niveau"].isnull()]
if not df_erreurs.empty:
    st.warning(f" Probl√®me de r√©cup√©ration pour : {', '.join(df_erreurs['Actif'].tolist())}")

# Application du style
styled_df = style_market_table(df)

# Affichage du tableau styl√©
st.write(styled_df, use_container_width=True, hide_index=True)

# Export Excel
excel_buffer = io.BytesIO()
with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
    df.to_excel(writer, sheet_name="March√©", index=False)
excel_buffer.seek(0)

# Bouton de t√©l√©chargement
st.download_button(
    label="üì• T√©l√©charger le tableau march√© (Excel)",
    data=excel_buffer,
    file_name="snapshot_marche.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# ================================
# MOTEUR D‚ÄôALERTE COMPACT
# ================================
st.markdown("## Moteur d'alerte ‚Äì Top mouvements (global)")

# Utilise les donn√©es compl√®tes pour l'alerte (pas filtr√©es)
df_alerts = df_all[df_all['‚àÜ 1j'].notna() & ~df_all['Actif'].str.startswith('---')].copy()

# Calcul des variations %
df_alerts['% 1j'] = (df_alerts['‚àÜ 1j'] / (df_alerts['Niveau'] - df_alerts['‚àÜ 1j'])) * 100
df_alerts['% 5j'] = (df_alerts['‚àÜ 5j'] / (df_alerts['Niveau'] - df_alerts['‚àÜ 5j'])) * 100

# Top actifs par crit√®re
top_hausses_1j = df_alerts.sort_values(by='% 1j', ascending=False).head(5)[['Actif', '% 1j']]
top_baisses_1j = df_alerts.sort_values(by='% 1j', ascending=True).head(5)[['Actif', '% 1j']]
top_hausses_5j = df_alerts.sort_values(by='% 5j', ascending=False).head(5)[['Actif', '% 5j']]
top_baisses_5j = df_alerts.sort_values(by='% 5j', ascending=True).head(5)[['Actif', '% 5j']]
top_vol = df_alerts.sort_values(by='Vol r√©alis√©e (%)', ascending=False).head(5)[['Actif', 'Vol r√©alis√©e (%)']]

# Affichage en 3 colonnes
col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("#### üìà Top 5 Hausses 1j")
    st.dataframe(top_hausses_1j, hide_index=True, use_container_width=True)
    st.markdown("#### üöÄ Top 5 Hausses 5j")
    st.dataframe(top_hausses_5j, hide_index=True, use_container_width=True)

with col2:
    st.markdown("#### üìâ Top 5 Baisses 1j")
    st.dataframe(top_baisses_1j, hide_index=True, use_container_width=True)
    st.markdown("#### üìâ Top 5 Baisses 5j")
    st.dataframe(top_baisses_5j, hide_index=True, use_container_width=True)

with col3:
    st.markdown("#### üî∫ Volatilit√© R√©alis√©e Annualis√©e (%)")
    st.dataframe(top_vol, hide_index=True, use_container_width=True)
